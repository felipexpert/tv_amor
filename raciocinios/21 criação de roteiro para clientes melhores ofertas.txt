DICA: Utilize o Gemini 2.5 pro, pelo https://aistudio.google.com/
DICA: Após gerar o áudio, VERIFIQUE SE ESTÁ FALANDO O NOME DO CLIENTE E DA EMPRESA CORRETAMENTE!

# Parte 1: Geração de Valor - Duração Aproximada de 30 a 50 segundos

A minha empresa, a Melhores Ofertas, presta serviço de Presença Digital, no formato Business to Business B2B, para a empresa cliente deste vídeo, portanto a empresa cliente tem os clientes dela, e os clientes dela são o foco deste roteiro

Crie um roteiro de vídeo para redes sociais, com o personagem chamado "Melhores Ofertas" (trate sempre no masculino Melhores Ofertas) conversando com o personagem cliente 'x' da empresa cliente 'y'.
O assunto do vídeo é 'z'.
Esta "Parte 1" do vídeo deve ter aproximadamente 30 a 50 segundos, com falas curtas, cada fala com aproximadamente 5 a 15 segundos de duração.
O roteiro deve incluir:
1. Saudação inicial (apresentando o personagem e a empresa cliente)
2. O assunto do vídeo

A seguir estão alguns textos sobre a empresa cliente para ajudar na criação do roteiro:

```
<textos-resumo-da-empresa>
```

Caso o texto sobre o cliente seja pequeno, complemente com os benefícios associados ao nicho e características do cliente 

O tom do vídeo deve ser amigável, natural e engajador, adequado para Instagram Reels, TikTok e Shorts.

# Parte 2: Finalização com CTA

Após a "Parte 1" de 30 a 50 segundos do vídeo, crie um fechamento de mais alguns segundos, curto, narrado pelo personagem "Melhores Ofertas", focado em CTA para obter prova social, a seguir alguns exemplos de CTAs:

```
1. Mostre o seu apoio! Comente elogiando a [empresa]!
2. Compartilhe nos comentários o que você mais gosta da [empresa]! Sua opinião ajuda outras pessoas!
3. Se você também ama os serviços da [empresa], deixe seu comentário aqui e ajude outros a descobrirem também!
4. Já teve uma experiência bacana com a [empresa]? Comente abaixo e inspire outros clientes a conhecerem também!
5. Queremos saber: qual foi a sua experiência com a [empresa]? Deixe seu comentário e inspire os outros clientes!
6. Já conhece a [empresa]? Conta pra gente nos comentários como foi sua experiência!
```

Este é o formato de cada narração que você deve criar, crie por favor 2 narrações distintas neste formato

O formato que você vai entregar a animação, será um Tipo Haskell, o Episode. A seguir o código fonte de Episode.hs

Episode.hs:
```
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveAnyClass #-}

-- MyModule.hs
module Model.Episode where

import qualified Data.Text as T
import Data.Text (Text)
import GHC.Generics (Generic) 

import Model.EpisodePersona (EPeLabel(..), EPeNumber(..))

import qualified Data.List as List

import Data.Aeson (ToJSON, FromJSON)


-- O episódio completo (lista de blocos)
-- NOTA: Posso fazer validação, aceita 1 ou 2 personas, e no eDialogueBlock, aceita apenas
-- EPeLabel que estão na lista de ePes
data Episode = Episode 
    { ePes :: [EPeLabel] -- Lista de personagens que participam do episódio
    , eDialoguePeList :: [EDialoguePe] -- Lista de blocos de fala
    } deriving (Show, Eq, Generic)

episodePeNumber :: Episode -> EPeLabel -> EPeNumber
episodePeNumber episode label = peNumber
    where 
        indexOpt :: Maybe Int
        indexOpt = List.findIndex sameLabel (ePes episode)
            where 
                sameLabel :: EPeLabel -> Bool
                sameLabel = (== label) 
        peNumber :: EPeNumber
        peNumber = case indexOpt of
            Just 0 -> EPeNum1
            Just 1 -> EPeNum2
            _      -> EPeNum1 -- Default, caso não encontre, retorna EPeNum1

-- Um bloco de fala, associado a um personagem
data EDialoguePe = EDialoguePe
    { dPe :: EPeLabel
    , dContents :: [DRichText]
    } deriving (Show, Eq)

-- Um trecho de texto com comandos embutidos
data DRichText
    = RPlainText Text
    | RCommand RCCommand
    deriving (Show, Eq)

-- Representa os comandos embutidos no texto
data RCCommand 
    -- ERTCGesture tem quem está fazendo o gesto, porque durante a fala de um, o outro pode fazer um gesto
    = CGesture
        { cGesture :: CGesture
        , cPe :: EPeLabel }
    | CPause Int -- Pausa em milissegundos
    deriving (Show, Eq)

data CGesture
    = GHi -- Aceno
    | GStandShort -- Fica com as mãos juntas, depois volta as mãos
    | GStandLong -- Fica com as mãos juntas por mais tempo, depois volta as mãos
    | GThinkShort -- Coloca a mão no queixo, reflexivo
    | GThinkLong -- Coloca a mão no queixo, reflexivo, por mais tempo
    | GTalkShort -- movimenta os braços, expressando ideias
    | GTalkLong -- movimenta os braços, expressando ideias, por mais tempo
    | GWorryShort -- demonstra um pouco de preocupação
    | GWorryLong -- demonstra um pouco de preocupação, por mais tempo
    | GShakeLegShort -- balança um pouco a perna
    | GShakeLegLong -- balança um pouco a perna, por mais tempo
    -- | GExcited -- fica animado!
    | GDance -- Dança de alegria (um pouco exagerado, não utilize tanto esse)
    | GDefault -- Este não precisa utilziar, por padrão, onde não tem ação, aplica-se esse automaticamente
    deriving (Show, Eq, Generic, ToJSON)

exampleEpisode :: Episode
exampleEpisode = Episode
    { ePes = [EPeLabel "pe_felipe", EPeLabel "pe_fatima"]
    , eDialoguePeList = exampleDialogues
    }
    where
        exampleDialogues :: [EDialoguePe]
        exampleDialogues =
            [ EDialoguePe
                { dPe = EPeLabel "pe_felipe"
                , dContents =
                    [ RPlainText "Olá Fatima"
                    , RCommand (CGesture GHi (EPeLabel "pe_felipe"))
                    , RCommand (CGesture GHi (EPeLabel "pe_fatima"))
                    , RCommand (CPause 500)
                    , RPlainText "Tudo bem por aí?"
                    ]
                }
            , EDialoguePe
                { dPe = EPeLabel "pe_fatima"
                , dContents =
                    [ RPlainText "Olá Felipe! Tudo ótimo!"
                    , RCommand (CGesture GHi (EPeLabel "pe_fatima")) ]
                }
            ]
episode01 :: Episode
episode01 = undefined -- crie o 1º episode aqui

episode02 :: Episode
episode02 = undefined -- crie o 2º episode aqui
```

Quando for criar `RPlainText :: Text`, cuidado para não por textos que o `edge_tts` do Python não entende ao converter para áudio, como "---"

Capriche nos gestos, procure utilizá-los de acordo com o significado do texto no momento em que aparecem, saiba que você pode invocar um gesto durante a fala do outro personagem, por isso o tipo do gesto, CGesture, tem um `cPe :: EPeLabel` próprio. COLOQUE OS GESTOS ENTRE PONTUAÇÕES COMO PONTOS FINAIS, PONTOS DE EXCLAMAÇÃO, E VÍRGULAS, NÃO NO MEIO DA FRASE, PARA NÃO FICAR UMA PAUSA ESTRANHA AO JUNTAR OS ÁUDIOS

Forneça SOMENTE `episode01` e `episode02`


Em `ePes`, onde lista os personagens, o personagem do cliente vem sempre em primeiro, e o personagem "Melhores Ofertas" por segundo